###########################################################################
#                             jvm.options                                 #
#                                                                         #
# - all flags defined here will be used by cassandra to startup the JVM   #
# - one flag should be specified per line                                 #
# - lines that do not start with '-' will be ignored                      #
# - only static flags are accepted (no variables or parameters)           #
# - dynamic flags will be appended to these on cassandra-env              #
###########################################################################

#################
# HEAP SETTINGS #
#################

# Heap size is automatically calculated by cassandra-env based on this
# formula: max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
# That is:
# - calculate 1/2 ram and cap to 1024MB
# - calculate 1/4 ram and cap to 8192MB
# - pick the max
#
# For production use you may wish to adjust this for your environment.
# If that's the case, uncomment the -Xmx and Xms options below to override the
# automatic calculation of JVM heap memory.
#
# It is recommended to set min (-Xms) and max (-Xmx) heap sizes to
# the same value to avoid stop-the-world GC pauses during resize, and
# so that we can lock the heap in memory on startup to prevent any
# of it from being swapped out.
<% if @heap_newsize.nil? -%>
#-Xms4G
<% else -%>
-Xms<%= @heap_newsize %>
<% end -%>
<% if @max_heap_size.nil? -%>
#-Xmx4G
<% else -%>
-Xmx<%= @max_heap_size %>
<% end -%>

# Young generation size is automatically calculated by cassandra-env
# based on this formula: min(100 * num_cores, 1/4 * heap size)
#
# The main trade-off for the young generation is that the larger it
# is, the longer GC pause times will be. The shorter it is, the more
# expensive GC will be (usually).
#
# It is not recommended to set the young generation size if using the
# G1 GC, since that will override the target pause-time goal.
# More info: http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html
#
# The example below assumes a modern 8-core+ machine for decent
# times. If in doubt, and if you do not particularly want to tweak, go
# 100 MB per physical CPU core.
#-Xmn800M

#################
#  GC SETTINGS  #
#################

### CMS Settings (comment out the G1 section and uncomment section below to enable)

#-XX:+UseParNewGC
#-XX:+UseConcMarkSweepGC
#-XX:+CMSParallelRemarkEnabled
#-XX:SurvivorRatio=8
#-XX:MaxTenuringThreshold=1
#-XX:CMSInitiatingOccupancyFraction=75
#-XX:+UseCMSInitiatingOccupancyOnly
#-XX:CMSWaitDuration=10000
#-XX:+CMSParallelInitialMarkEnabled
#-XX:+CMSEdenChunksRecordAlways
## some JVMs will fill up their heap when accessed via JMX, see CASSANDRA-6541
#-XX:+CMSClassUnloadingEnabled

### G1 Settings

# Use the Hotspot garbage-first collector.
-XX:+UseG1GC

# Have the JVM do less remembered set work during STW, instead
# preferring concurrent GC. Reduces p99.9 latency.
-XX:G1RSetUpdatingPauseTimePercent=5

# Main G1GC tunable: lowering the pause target will lower throughput and vise versa.
# 200ms is the JVM default and lowest viable setting
# 1000ms increases throughput. Keep it smaller than the timeouts in cassandra.yaml.
-XX:MaxGCPauseMillis=500

## Optional G1 Settings

# Save CPU time on large (>= 16GB) heaps by delaying region scanning
# until the heap is 70% full. The default in Hotspot 8u40 is 40%.
<% if @initiating_heap_occupancy_percent.nil? -%>
#-XX:InitiatingHeapOccupancyPercent=70
<% else -%>
-XX:InitiatingHeapOccupancyPercent=<%= @initiating_heap_occupancy_percent %>
<% end -%>

# For systems with > 8 cores, the default ParallelGCThreads is 5/8 the number of logical cores.
# Otherwise equal to the number of cores when 8 or less.
# Machines with > 10 cores should try setting these to <= full cores.
<% if @parallel_gc_threads.nil? -%>
#-XX:ParallelGCThreads=16
<% else -%>
-XX:ParallelGCThreads=<%= @parallel_gc_threads %>
<% end -%>
# By default, ConcGCThreads is 1/4 of ParallelGCThreads.
# Setting both to the same value can reduce STW durations.
<% if @conc_gc_threads.nil? -%>
#-XX:ConcGCThreads=16
<% else -%>
-XX:ConcGCThreads=<%= @conc_gc_threads %>
<% end -%>

### GC logging options -- uncomment to enable
<% if @loggc.nil? -%>
#-XX:+PrintGCDetails
#-XX:+PrintGCDateStamps
#-XX:+PrintHeapAtGC
#-XX:+PrintTenuringDistribution
#-XX:+PrintGCApplicationStoppedTime
#-XX:+PrintPromotionFailure
#-XX:PrintFLSStatistics=1
#-Xloggc:/var/log/cassandra/gc.log
#-XX:+UseGCLogFileRotation
#-XX:NumberOfGCLogFiles=10
#-XX:GCLogFileSize=10M
<% else -%>
-XX:+PrintGCDetails
-XX:+PrintGCDateStamps
-XX:+PrintHeapAtGC
-XX:+PrintTenuringDistribution
-XX:+PrintGCApplicationStoppedTime
-XX:+PrintPromotionFailure
-XX:PrintFLSStatistics=1
-Xloggc:<%= @loggc %>
-XX:+UseGCLogFileRotation
-XX:NumberOfGCLogFiles=10
-XX:GCLogFileSize=10M
<% end -%>

<% unless @jna_tmpdir.nil? -%>
# Workaround JNA using /tmp (dse won't start if /tmp is noexec)
-Djna.tmpdir=<%= @jna_tmpdir %>
<% end -%>

<% if @parallel_ref_proc_enabled -%>
# Do reference processing in parallel GC.
-XX:+ParallelRefProcEnabled
<% end -%>

<% unless @snappy_tmp_dir.nil? -%>
-Dorg.xerial.snappy.tempdir=<%= @snappy_tmp_dir %>
<% end -%>
<% unless @netty_tmp_dir.nil? -%>
-Dio.netty.tmpdir=<%= @netty_tmp_dir %>
<% end -%>
<% unless @java_io_tmp_dir.nil? -%>
-Djava.io.tmpdir=<%= @java_io_tmp_dir %>
<% end -%>
<% unless @jmx_notification_buffer_size.nil? -%>
-Djmx.remote.x.notification.buffer.size=<%= @jmx_notification_buffer_size %>
<% end -%>
<% unless @cassandra_consistent_rangemovement.nil? -%>
-Dcassandra.consistent.rangemovement=<%= @cassandra_consistent_rangemovement %>
<% end -%>
<% unless @cassandra_rar_buffer_size.nil? -%>
-Dcassandra.rar_buffer_size=<%= @cassandra_rar_buffer_size %>
<% end -%>
